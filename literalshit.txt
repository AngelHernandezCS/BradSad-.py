if(message.author.id != self.user.id):
            if(message.guild != None):
                if(message.content == "+today" and keyentered and secretentered):
                    print(message.author,":", message.content)
                    assignmentDict = sortAssignments(schoology(key, secret), classcode)#replace with tempuser key/secret
                    #valueList = list(assignmentDict.values())
                    try:
                        cdate = getCurrentDate(False)
                        temp = assignmentDict[cdate]
                        await message.channel.send(embed = sendEmbed(discord,temp[0],temp[3],cdate,temp[4], temp[2], temp[1], message.author.display_name, message.author.avatar_url))
                    except KeyError:
                        await message.channel.send(message.author.mention + " There are no assignments due today")
                elif (message.content == "+nextday" and keyentered and secretentered):
                    print(message.author,":", message.content)
                    assignmentDict = sortAssignments(schoology(key,secret), classcode)
                    try:
                        nextDate = getCurrentDate(True)
                        temp = assignmentDict[nextDate] #replace brackets with nextDate
                        await message.channel.send(embed = sendEmbed(discord,temp[0],temp[3],nextDate,temp[4], temp[2], temp[1], message.author.display_name, message.author.avatar_url))
                    except KeyError:
                        await message.channel.send(message.author.mention +  " There are no assignments due Tomorrow")
                elif (message.content == "+init"):
                    userGuild = message.guild
                    print(userGuild)
                    await message.author.send("Hello\nPlease Enter key and Secret\n\nEnter Key Below: ")
                elif ((message.content == "+today" or message.content == "+nextday") and not keyentered and not secretentered):
                    await message.channel.send(message.author.mention + " Please Finish initalization first with command:\n+init")
                elif (message.content == "+classes"):
                    #gets all classes from user, it will need the usercode (new or not), so you can move this elif around to where the user has already intialized
                    classesDict = sortClasses(schoology(key, secret), tempusercode)
                    classesList = classesDict.keys()
                    await message.channel.send(embed = sendClassEmbed(discord, message.author.display_name, message.author.avatar_url, classesList[0], classesList[1], classesList[2], classesList[3], classesList[4], classesList[5], classesList[6])) 
                    #after the embed message the user should choose a number which corresponds to the course, which will be linked to a classcode.
                    #then the function sortChosenClass will be called which will take their input and return the class code (make sure to int() their input)
            elif(message.guild == None and (not keyentered and not secretentered)): #I NEED IT TO NOT READ MESSAGES UNLESS INIT COMMMAND HAS BEEN CALLED
                if(not keyentered):
                    tempuserkey = message.content #store  
                    keyentered = True
                    await message.author.send("Key Recieved!\nPlease enter secret: ")
                elif(not secretentered):
                    tempusersecret = message.content #store in a limited dict 
                    secretentered = True
                    await message.author.send("Secret Recieved\nChecking if correct Momentarily")
                    try:
                        tempschool = schoology(tempuserkey,tempusersecret)
                        tempuser = tempschool.getusercode()
                        if(tempuser == None):
                            secretentered = False
                            keyentered = False
                            await message.author.send("Invalid Secret or Key\nPlease initalize once again(Keys and Secrets must be Exact do not leave empty space)")
                        else:
                            userList = sortUser(schoology(tempuserkey,tempusersecret)) 
                            tempusercode = userList[0] #sets the new usercode 
                            await message.author.send("Succesful you can now use the commands in your server")
                    except:
                        secretentered = False
                        keyentered = False
                        await message.author.send("Invalid Secret or Key\nPlease initalize once again(Keys and Secrets must be Exact do not leave empty space)")